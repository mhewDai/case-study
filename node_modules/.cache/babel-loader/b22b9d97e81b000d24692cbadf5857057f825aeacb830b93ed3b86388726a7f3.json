{"ast":null,"code":"// export const getAIMessage = async (userQuery) => {\n\n//   const message = \n//     {\n//       role: \"assistant\",\n//       content: \"Connect your backend here....\"\n//     }\n\n//   return message;\n// };\n\n// API configuration\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Main function that your ChatWindow.js calls\nexport const getAIMessage = async userQuery => {\n  try {\n    // Call your Python FastAPI backend\n    const response = await apiRequest('/api/chat', {\n      method: 'POST',\n      body: JSON.stringify({\n        message: userQuery\n      })\n    });\n\n    // Return in the format your ChatWindow expects\n    return {\n      role: \"assistant\",\n      content: response.response,\n      // Additional data that you can use to enhance the UI\n      partSuggestions: response.part_suggestions,\n      sources: response.sources\n    };\n  } catch (error) {\n    // Return error message in case of failure\n    return {\n      role: \"assistant\",\n      content: \"I'm sorry, I'm having trouble connecting to my knowledge base right now. Please try again in a moment.\"\n    };\n  }\n};\n\n// Additional API functions you can use\nexport const checkCompatibility = async (partNumber, modelNumber) => {\n  try {\n    const response = await apiRequest('/api/compatibility', {\n      method: 'POST',\n      body: JSON.stringify({\n        part_number: partNumber,\n        model_number: modelNumber\n      })\n    });\n    return response;\n  } catch (error) {\n    console.error('Compatibility check failed:', error);\n    throw error;\n  }\n};\nexport const searchProducts = async (searchQuery, category = null) => {\n  try {\n    const params = new URLSearchParams();\n    if (searchQuery) params.append('search', searchQuery);\n    if (category) params.append('category', category);\n    const response = await apiRequest(`/api/products?${params.toString()}`);\n    return response.products;\n  } catch (error) {\n    console.error('Product search failed:', error);\n    throw error;\n  }\n};\n\n// Health check function to test backend connection\nexport const checkBackendHealth = async () => {\n  try {\n    const response = await apiRequest('/health');\n    return response.status === 'healthy';\n  } catch (error) {\n    console.error('Backend health check failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","response","fetch","headers","ok","Error","status","json","error","console","getAIMessage","userQuery","method","body","JSON","stringify","message","role","content","partSuggestions","part_suggestions","sources","checkCompatibility","partNumber","modelNumber","part_number","model_number","searchProducts","searchQuery","category","params","URLSearchParams","append","toString","products","checkBackendHealth"],"sources":["/Users/eir/Downloads/instalily/case-study/src/api/api.js"],"sourcesContent":["\n// export const getAIMessage = async (userQuery) => {\n\n//   const message = \n//     {\n//       role: \"assistant\",\n//       content: \"Connect your backend here....\"\n//     }\n\n//   return message;\n// };\n\n\n// API configuration\nconst API_BASE_URL = 'http://localhost:8000';\n\n// Helper function to handle API requests\nconst apiRequest = async (endpoint, options = {}) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Main function that your ChatWindow.js calls\nexport const getAIMessage = async (userQuery) => {\n  try {\n    // Call your Python FastAPI backend\n    const response = await apiRequest('/api/chat', {\n      method: 'POST',\n      body: JSON.stringify({\n        message: userQuery\n      })\n    });\n\n    // Return in the format your ChatWindow expects\n    return {\n      role: \"assistant\",\n      content: response.response,\n      // Additional data that you can use to enhance the UI\n      partSuggestions: response.part_suggestions,\n      sources: response.sources\n    };\n\n  } catch (error) {\n    // Return error message in case of failure\n    return {\n      role: \"assistant\",\n      content: \"I'm sorry, I'm having trouble connecting to my knowledge base right now. Please try again in a moment.\"\n    };\n  }\n};\n\n// Additional API functions you can use\nexport const checkCompatibility = async (partNumber, modelNumber) => {\n  try {\n    const response = await apiRequest('/api/compatibility', {\n      method: 'POST',\n      body: JSON.stringify({\n        part_number: partNumber,\n        model_number: modelNumber\n      })\n    });\n    return response;\n  } catch (error) {\n    console.error('Compatibility check failed:', error);\n    throw error;\n  }\n};\n\nexport const searchProducts = async (searchQuery, category = null) => {\n  try {\n    const params = new URLSearchParams();\n    if (searchQuery) params.append('search', searchQuery);\n    if (category) params.append('category', category);\n    \n    const response = await apiRequest(`/api/products?${params.toString()}`);\n    return response.products;\n  } catch (error) {\n    console.error('Product search failed:', error);\n    throw error;\n  }\n};\n\n// Health check function to test backend connection\nexport const checkBackendHealth = async () => {\n  try {\n    const response = await apiRequest('/health');\n    return response.status === 'healthy';\n  } catch (error) {\n    console.error('Backend health check failed:', error);\n    return false;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}